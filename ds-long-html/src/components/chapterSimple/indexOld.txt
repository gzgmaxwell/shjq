<template>
  <div class="chapter">
    <el-row>
      <el-col :span="15">
        <div class="wrap">
          <videoPlayer
            ref="video"
            :single="{
              videoOriginalFileUrl: row.videoOriginalUrl,
              coverFileUrl: row.coverUrl,
            }"
            title="视频预览"
          />
        </div>
        <div class="showBox">
          <div class="btnList">
            <el-button
              @click="createPart"
              :disabled="isPlaying || isCapturing || isInPart"
              >创建片段</el-button
            >
            <el-button @click="clear" :disabled="!data.length">清空</el-button>
            <el-button @click="deletePart" :disabled="!data.length"
              >删除片段</el-button
            >
            <el-button @click="handleCapture" :disabled="!data.length"
              >截取封面</el-button
            >
          </div>
          <upload
            bucketType="PRE_VIDEO"
            style="visibility: hidden; position: absolute"
            ref="uploadRef"
            :W2HRate="0"
            :maxFileSize="5"
            :limit="1"
            title="封面图片"
            :fileList="[]"
          />
          <canvas id="mycanvas" style="display: none"></canvas></div
      ></el-col>
      <el-col :span="9">
        <div class="wrapbox">
          <div>节点分类</div>
          <el-row
            v-for="(item, i) in data"
            class="mt10 itemBox"
            :class="{ active: item.isActive }"
          >
            <div
              @click="
                () => {
                  data.forEach((v) => (v.isActive = false));
                  item.isActive = true;
                }
              "
            >
              <el-col :span="17">
                <div class="listWrap">
                  <span class="title">节点时间：</span> 第
                  {{ Math.floor(item.endTime || 0) }} 秒
                </div>
                <div class="listWrap">
                  <span class="title">节点ICON：</span>
                  <span class="icon" @click="clickIcon(item)">
                    <img
                      v-if="item.iconFileUrl"
                      :src="item.iconFileUrl"
                      width="24"
                      height="24"
                    />
                  </span>
                </div>
                <div class="listWrap">
                  <span class="title">节点名称：</span>
                  <el-input
                    maxLength="12"
                    type="text"
                    size="mini"
                    v-model="item.name"
                    @input="input"
                    :style="{ width: '120px' }"
                  />
                </div>
              </el-col>
              <el-col :span="7">
                <img
                  v-if="item.url"
                  class="mr10 mt10"
                  :src="item.url"
                  width="80"
                  height="80"
                />
              </el-col>
            </div>
          </el-row>
        </div>
      </el-col>
    </el-row>

    <div class="mt20">
      <el-button type="primary" @click="sureBtn">确认</el-button>
      <el-button @click="row.callback()">取消</el-button>
    </div>
    <el-dialog
      title="节点图标"
      :visible.sync="visible"
      width="30%"
      :modal="false"
      :close-on-click-modal="false"
    >
      <progressVideo v-if="visible" :row="params" />
    </el-dialog>
  </div>
</template>
<script>
import videoPlayer from "@/components/video-player/index.vue";
import upload from "@/components/upload/index.vue";
import { chapterOnOff } from "@/api/content/management";
import progressVideo from "./progressVideo.vue";

const minIntevalTime = 1;
export default {
  components: {
    videoPlayer,
    upload,
    progressVideo,
  },
  props: {
    row: {
      type: Object,
      required: false,
      default: () => {
        return {};
      },
    },
  },

  data() {
    return {
      data: [],
      isCapturing: false,
      status: "OFFLINE",
      visible: false,
      params: {},
      isPlaying: false,
      isInPart: false,
    };
  },
  mounted() {
    setTimeout(() => {
      this.loadVideo();
    });
  },

  methods: {
    loadVideo() {
      const video = document.getElementById("videoElement");
      video.addEventListener("loadeddata", () => {
        if (this.row.partList.length) {
          this.getPartList();
        }
      });
      video.addEventListener("timeupdate", () => {
        const currentTime = video.currentTime;
        console.log("timeupdate currentTime", currentTime);
        const duration = video.duration;
        this.isInPart = this.data.some((v) => {
          if (v.startTime < currentTime && v.endTime > currentTime) {
            return true;
          }
          if (duration - v.endTime < minIntevalTime) {
            return true;
          }
          return false;
        });
      });
      video.addEventListener("play", () => {
        this.isPlaying = true;
      });
      video.addEventListener("pause", () => {
        this.isPlaying = false;
      });
    },

    getPartList() {
      this.status = this.row.status;
      this.row.partList.forEach((v, i) => {
        const rate = 1000;
        const item = {
          name: v.chapterTitle,
          startTime: v.chapterStartTime / rate,
          endTime: v.chapterEndTime / rate,
          isActive: i === 0,
          bucketName: v.imgBucketName,
          key: v.imgFileName,
          url: v.imgFileUrl,
          iconFileName: v.iconFileName, // icon
          iconBucketName: v.iconBucketName, // icon
          iconFileUrl: v.iconFileUrl,
        };
        this.data.push(item);
      });
    },

    input(val) {
      this.name = val;
      this.data.forEach((v) => {
        if (v.isActive) {
          v.name = val;
        }
      });
    },
    clickIcon(item) {
      this.visible = true;
      this.params = {
        callback: (data) => {
          this.visible = false;
          item.iconBucketName = data.avatarBucket;
          item.iconFileName = data.avatar;
          item.iconFileUrl = data.avatarFileUrl;
        },
      };
    },

    sureBtn() {
      this.row.callback(this.data);
    },
    createPart() {
      this.isCapturing = true;
      const len = this.data.length;
      const video = document.getElementById("videoElement");
      const paused = video;
      const currentTime = video.currentTime;
      const duration = video.duration;

      let startTime = 0;
      let endTime = 0;

      if (paused) {
        if (!this.data.length) {
          if (currentTime > minIntevalTime) {
            startTime = 0;
            endTime = currentTime;
          } else {
            startTime = 0;
            endTime = minIntevalTime;
          }
        } else {
          const item = this.data[len - 1];
          if (currentTime - item.endTime > minIntevalTime) {
            startTime = item.endTime;
            endTime = currentTime;
          } else {
            let moreZeroIndex = 0;
            for (let i = 0; i < this.data.length; i++) {
              if (currentTime - this.data[i].endTime < 0 && i > 0) {
                moreZeroIndex = i - 1;
                break;
              }
            }
            if (moreZeroIndex > 0 && moreZeroIndex < this.data.length - 1) {
              startTime = this.data[moreZeroIndex].endTime;
              endTime = currentTime;
            } else {
              startTime = item.endTime;
              const temp = currentTime + minIntevalTime;
              if (temp > duration) {
                endTime = duration;
              } else {
                endTime = currentTime + minIntevalTime;
              }
            }
          }
        }
      }
      this.data.forEach((v) => (v.isActive = false));
      const item = {
        name: "节点",
        startTime: startTime,
        endTime: endTime,
        isActive: true,
        bucketName: "",
        key: "",
        url: "",
        iconBucketName: "", // icon
        iconFileName: "", // icon
        iconFileUrl: "", // icon
      };
      const arr = [...this.data, item];
      this.data = arr.sort((a, b) => {
        return a.startTime - b.startTime;
      });
      console.log(111, endTime);
      video.currentTime = endTime;
      this.handleCapture();
    },
    deletePart() {
      const video = document.getElementById("videoElement");
      this.data = this.data.filter((v) => !v.isActive);
      const isNoneActive = this.data.every((v) => !v.isActive);
      if (this.data.length && isNoneActive) {
        this.data[this.data.length - 1].isActive = true;
      }
      if (this.data.length) {
        const lastItem = this.data[this.data.length - 1];
        video.currentTime = lastItem.endTime;
      } else {
        video.currentTime = 0;
      }
    },
    handleCapture() {
      const uploadRef = this.$refs.uploadRef;
      const videoRef = document.getElementById("videoElement");
      const canvas = document.getElementById("mycanvas");
      const ctx = canvas.getContext("2d");

      videoRef.crossOrigin = "anonymous";
      canvas.width = videoRef.videoWidth;
      canvas.height = videoRef.videoHeight;

      ctx.drawImage(videoRef, 0, 0, canvas.width, canvas.height);

      canvas.toBlob((blob) => {
        const file = new File([blob], "andy.webp", { type: "image/webp" });
        uploadRef.awsUpload(file, (data) => {
          this.$message.success("抓拍成功");
          this.data.forEach((v) => {
            if (v.isActive) {
              v.bucketName = data.bucketName;
              v.key = data.key;
              v.url = data.url;
              this.isCapturing = false;
            }
          });
        });
      });
    },
    changeStatus(val) {
      chapterOnOff({ status: val, substanceId: this.row.id }).then(() => {
        this.$message.success("修改成功");
      });
    },
    clear() {
      this.data = [];
      const video = document.getElementById("videoElement");
      video.currentTime = 0;
    },
  },
};
</script>
<style lang="scss" scoped>
.active {
  border: 1px solid #571ae4 !important;
}
.chapter {
  padding: 0 20px;
  .wrap {
    position: relative;
    width: 520px;
    height: 292px;
    video {
      position: absolute;
      height: 100%;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
      z-index: 0;
    }
    .scaleBox {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
    }
  }
  .showBox {
    display: flex;
    justify-content: flex-start;
    margin-top: 20px;
    .btnList {
      width: 340px !important;
    }
  }
  .wrapbox {
    height: 450px;
    overflow-y: auto;
    padding-right: 10px;
    .itemBox {
      padding: 3px;
      border: 1px solid #888;
      .listWrap {
        display: flex;
        height: 30px;
        justify-content: flex-start;
        align-items: center;
        .title {
          display: inline-block;
          width: 80px;
          text-align: right;
        }
        .icon {
          display: inline-block;
          width: 80px;
          width: 24px;
          height: 24px;
          outline: 1px solid #d4d4d4;
        }
      }
    }
  }
}
</style>
